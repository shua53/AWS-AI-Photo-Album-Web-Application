AWSTemplateFormatVersion: '2010-09-09'
Description: S3 Template

Resources:

  # S3 Bucket for photo index
  IndexBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "coms6998-asm-2-cf"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
          
  IndexBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: IndexBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::coms6998-asm-2-cf/*

              
  # S3 Bucket for photo search
  SearchBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "frontend-asm2-coms6998-cf"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  SearchBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SearchBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::frontend-asm2-coms6998-cf/*



  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPermissionsPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "lex:*"
                  - "es:*"
                  - "s3:*"
                Resource: "*"

  # Lambda Function for photo index
  IndexLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "index-photos-cf"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.8" 
      Code:
        # The S3 bucket and key where the Lambda function code is stored
        S3Bucket: "photo-bucket-cf"
        S3Key: "index-photos.zip"

  # Lambda Function for photo search
  SearchLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "search-photos-cf"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.8" 
      Code:
        # The S3 bucket and key where the Lambda function code is stored
        S3Bucket: "photo-bucket-cf"
        S3Key: "search-photos.zip"


  MyLambdaS3TriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IndexLambda
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::coms6998-asm-2-cf


  # OpenSearch Domain:
  #   Type: AWS::OpenSearchService::Domain
  #     Properties:
  #       DomainName: "photo-open-search-cf"
  #       AccessPolicies: Json
  #       AdvancedOptions: 
  #         Key: Value
  #       AdvancedSecurityOptions: 
  #         AdvancedSecurityOptionsInput
  #       ClusterConfig: 
  #         ClusterConfig
  #       CognitoOptions: 
  #         CognitoOptions
  #       DomainEndpointOptions: 
  #         DomainEndpointOptions
  #       DomainName: String
  #       EBSOptions: 
  #         EBSOptions
  #       EncryptionAtRestOptions: 
  #         EncryptionAtRestOptions
  #       EngineVersion: String
  #       LogPublishingOptions: 
  #         Key: Value
  #       NodeToNodeEncryptionOptions: 
  #         NodeToNodeEncryptionOptions
  #       OffPeakWindowOptions: 
  #         OffPeakWindowOptions
  #       SnapshotOptions: 
  #         SnapshotOptions
  #       SoftwareUpdateOptions: 
  #         SoftwareUpdateOptions
  #       Tags: 
  #         - Tag
  #       VPCOptions: 
  #         VPCOptions



  MyOpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: "hw2-opensearch"
      EngineVersion: "OpenSearch_1.0"
      ClusterConfig:
        InstanceType: "m4.large.search"
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeType: "gp2"
        VolumeSize: 10
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: "master"
          MasterUserPassword: "Master00."
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: "Policy-Min-TLS-1-2-2019-07"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "arn:aws:es:us-east-1:498359413671:domain/photos/*"


  
  PhotoAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Photo-API-CF
      EndpointConfiguration:
        Types:
          - REGIONAL
      Description: AI Photo Search application
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        host: "cl5eo1i8t5.execute-api.us-east-1.amazonaws.com"
        basePath: "/test-stage"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload/{bucket}/{filename}:
            put:
              produces:
              - "application/json"
              parameters:
              - name: "filename"
                in: "path"
                required: true
                type: "string"
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Photo"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "filename"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Error"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
